import datetime
import ipaddress
import re
from urllib.parse import urlparse,quote
import whois
import urllib.request
from bs4 import BeautifulSoup

def getDomain(url):  
    parsed_url = urlparse(url)
    domain_parts = parsed_url.netloc.split('.')
    main_domain = '.'.join(domain_parts[-2:])
    return main_domain
        
def havingIP(url):
    try:
        ipaddress.ip_address(url)
        ip = 1
    except:
        ip = 0
    return ip        

def haveAtSign(url):
    if "@" in url:
        at = 1    
    else:
        at = 0    
    return at

def get_whois_info(domain):
    try:
        w = whois.whois(domain)
        return w
    except Exception as e:
        print(f"Error retrieving WHOIS information: {e}")
        return None
    
def web_traffic(url):
  try:
    #Filling the whitespaces in the URL if any
    url = quote(url)
    rank = BeautifulSoup(urllib.request.urlopen("https://www.alexa.com/minisiteinfo/" +url),'html.parser').table.a.get_text()
    rank_int=int(rank.replace(',',''))
    print(rank_int)
  except TypeError:
        return 1
  if rank <100000:
    return 1
  else:
    return 0
  
def domainAge(creation_date,expiration_date):
  if (isinstance(creation_date,str) or isinstance(expiration_date,str)):
    try:
      creation_date = datetime.strptime(creation_date,'%Y-%m-%d')
      expiration_date = datetime.strptime(expiration_date,"%Y-%m-%d")
    except:
      return 1
  if ((expiration_date is None) or (creation_date is None)):
      return 1
  elif ((type(expiration_date) is list) or (type(creation_date) is list)):
      return 1
  else:
    ageofdomain = abs((expiration_date - creation_date).days)
    if ((ageofdomain/30) < 6):
      age = 1
    else:
      age = 0
  return age

def domainEnd(expiration_date):
  if isinstance(expiration_date,str):
    try:
      expiration_date = datetime.strptime(expiration_date,"%Y-%m-%d")
    except:
      return 1
  if (expiration_date is None):
      return 1
  elif (type(expiration_date) is list):
      return 1
  else:
    today = datetime.now()
    end = abs((expiration_date - today).days)
    if ((end/30) < 6):
      end = 0
    else:
      end = 1
  return end

# check url has charactors other than english
def checkEnglish(url):
    try:
        url.encode(encoding='utf-8').decode('ascii')
    except UnicodeDecodeError:
        return 1
    else:
        return 0
    
def prefixSuffix(url):
    if '-' in urlparse(url).netloc:
        return 1
    else:
        return 0            



def tinyURL(url):
    with open('shortning_services.txt', 'r') as f:
        url_shortening_services = f.read().splitlines()
        parsed_url = urlparse(url)
        domain = parsed_url.netloc

        for service in url_shortening_services:
            if service in domain:
                return 0
            else:
                return 1
    
def checkLegitimate(domain):
    legit_domains = open("legit_domains.txt", "r")
    for line in legit_domains:
        if line.strip() == domain:
          return 0
    return 1

def getLength(url):
  if len(url) < 54:
    length = 0  
    return 0          
  else:         
    return 1